#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(ros:ensure-asdf)
(ql:quickload '(:usocket :cl-ppcre :jsown :series))

(defpackage :scratch
  (:use
   :cl
   :series
   ))
(in-package :scratch)

(defparameter *msg* (make-hash-table))
(let ((msgid 0))
  (defun msgid ()
    (incf msgid)))

(defun request (cmd obj)
  (let* ((msgid (msgid))
         (s (usocket:socket-stream *sock*))
         (str  (jsown:to-json (list 0 msgid cmd obj)))
         (len (length str)))
    (format s "~a:~a" len str)
    (finish-output s)

    (loop repeat 100
          do
             (try-receive)
             (let ((response (gethash msgid *msg*)))
               (when response
                 (remhash msgid *msg*)
                 (return-from request response)))
             (sleep 0.05))
    ))

(defvar *sock* nil)
(defvar *buffer* nil)
(defvar *buffer-fp* nil)

(defun init ()
  (setf *sock* (usocket:socket-connect "localhost" 2828))
  (setf *buffer* "")
  (setf *buffer-fp* 0)
  )
(defun deinit ()
  (usocket:socket-close *sock*))

(defun try-receive (&aux msg-str)
  (let ((s (usocket:socket-stream *sock*))
        tmp)
    (loop for x = (read-char-no-hang s nil nil)
          while x
          do
            (push x tmp))
    (when tmp
      (setf *buffer* (concatenate 'string *buffer* (coerce (nreverse tmp) 'string))))
    (multiple-value-bind (match reg) (ppcre:scan-to-strings "^(\\d+):" *buffer* :start *buffer-fp*)
      (when match
        (let* ((len (parse-integer (aref reg 0)))
               (new-buffer-fp (+ *buffer-fp* (length match)))
               (new-new-buffer-fp (+ new-buffer-fp len)))
          (format t ">>~a:~a~%" new-buffer-fp new-new-buffer-fp)
          (setf msg-str (subseq *buffer* new-buffer-fp new-new-buffer-fp))
          (setf *tmp-msg-str* msg-str)
          (setf *buffer-fp* new-new-buffer-fp)))))
  (when msg-str
    (format t "debug msg-str:~a~%" msg-str)
    (let ((msg (jsown:parse msg-str)))
      (unless msg (error "cannot parse msg-str:~s" msg-str))
      ;; initial message. skip.
      (when (eql :obj (car msg))
        (format t "initial response:~s" msg)
        (return-from try-receive nil))

      (destructuring-bind (type id error-body body) msg
        (assert (= 1 type))
        (setf (gethash id *msg*) (or error-body body))))))





(defun main (&rest argv)
  (declare (ignorable argv))
  (init)
  (unwind-protect
       (let ((response (request "WebDriver:NewSession" '(:obj))))
         ;;(request "Marionette:Quit" '(:obj))
         (format t ">>~s~%" response)
         (let ((session-id (jsown:val response "sessionId")))
           (let ((response (request "WebDriver:Navigate"
                                    `(:obj
                                      ("sessionId" . ,session-id)
                                      ("url" . "https://www.google.com?q=b")
                                      ))))
             (format t ">>~s~%" response))))
    (deinit))
  (loop (sleep 10000))
  )
