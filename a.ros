#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(ros:ensure-asdf)
(ql:quickload '(:usocket :cl-ppcre :jsown :series :babel))

(defpackage :scratch
  (:use
   :cl
   :series
   ))
(in-package :scratch)

(defparameter *msg* (make-hash-table))
(let ((msgid 0))
  (defun msgid ()
    (incf msgid)))

(defun request (cmd obj)
  (let* ((msgid (msgid))
         (s (usocket:socket-stream *sock*))
         (str  (jsown:to-json (list 0 msgid cmd obj)))
         (len (length str)))

    (write-sequence (babel:string-to-octets (format nil "~a:~a" len str)) s)
    (finish-output s)

    (loop repeat 100
          do
             (try-receive)
             (let ((response (gethash msgid *msg*)))
               (when response
                 (remhash msgid *msg*)
                 (return-from request response)))
             (sleep 0.05))

    (format t ">>>fail to request. buffer:~s~%" *buffer*)
    nil
    ))

(defun ff-req (cmd &rest kv)
  (let ((body (cons :obj (collect (mapping (((k v) (chunk 2 2 (scan kv))))
                                    (cons k v))))))
    (request cmd body)))

(defvar *debugp* nil)
(defvar *sock* nil)
(defvar *buffer* nil)
(defvar *buffer-fp* nil)
(defvar *session* nil)
;;(defvar *readbuf-len* 1024)
;;(defvar *readbuf* (make-array *readbuf-len* :element-type '(unsigned-byte 8)))

(defun ff-init ()
  (setf *sock* (usocket:socket-connect "localhost" 2828 :element-type '(unsigned-byte 8)))
  (setf *buffer* "")
  (setf *buffer-fp* 0)

  ;; session
  (when *session* (error "*session* is not null :~a" *session*))
  (let ((response (ff-req "WebDriver:NewSession")))
    (let ((session (jsown:val response "sessionId")))
      (when session
        (setf *session* session)))
    response
    ))
(defun ff-deinit ()
  (when *session*
    (let ((response (ff-req "WebDriver:DeleteSession")))
      (setf *session* nil)
      response))
  (usocket:socket-close *sock*))

(defun ff-deinit-force ()
  (when *sock*
    (usocket:socket-close *sock*))
  (setf *session* nil))

(let ((buf (make-array 1 :element-type '(unsigned-byte 8))))
  (defun x-read-char-no-hang (stream)
    "read-byte-no-hang is not exist.."
    (let ((len (read-sequence buf stream)))
      (if (= 1 len)
        (code-char (aref buf 0))
        nil))))

(defun try-receive ()
  (format t ">>>try-receive~%")
  (let ((s (usocket:socket-stream *sock*))
        lenbuf
        len
        bodybuf
        ;;(bodybuf-len 0)
        body)

    (loop for x = (x-read-char-no-hang s)
          repeat 100
          until (eql #\: x)
          do (when x
               (push x lenbuf)))
    (unless lenbuf (return-from try-receive))
    (setf len (parse-integer (coerce (reverse lenbuf) 'string)))

    (format t ">>len:~s~%" len)

    ;;;;(ql:quickload :flexi-streams)
    ;;(let ((a (make-array 10 :element-type '(unsigned-byte 8))))
    ;;  (flex:with-input-from-sequence (is #(100 200))
    ;;    (let ((len (read-sequence a is)))
    ;;      (list len a))))

    (setq bodybuf (make-array len :element-type '(unsigned-byte 8)))
    (let ((idx 0))
      (block nil
        (loop for read-len = (read-sequence bodybuf s :start idx)
              do (incf idx read-len)
                 (when (= idx len)
                   (return)))))
    (setf body (babel:octets-to-string bodybuf))
    ;;(format t "debug body:[~a]~%" body)
    (let ((msg (jsown:parse body)))
      (unless msg (error "cannot parse msg-str:~s" body))
      ;; initial message. skip.
      (when (eql :obj (car msg))
        (format t "initial response:~s" msg)
        (return-from try-receive nil))

      (destructuring-bind (type id error-obj obj) msg
        (assert (= 1 type))
        (setf (gethash id *msg*) (or error-obj obj))))))

(defun resval (res)
  (jsown:val res "value"))

(defun ff-url ()
  (let ((res (ff-req "WebDriver:GetCurrentURL")))
    (resval res)))

(defun (setf ff-url) (url)
  (let ((res (ff-req "WebDriver:Navigate" "url" url)))
    res))

(defun ff-title ()
  (let ((res (ff-req "WebDriver:GetTitle")))
    (resval res)))

(defun ff-window-handles ()
  (let ((res (ff-req "WebDriver:GetWindowHandles")))
    res))

#+nil(defun ff-chrome-window-handles ()
       "whatisthis?"
       (let ((res (ff-req "WebDriver:GetChromeWindowHandles")))
         res))

(defun ff-source ()
  (let ((res (ff-req "WebDriver:GetPageSource")))
    res)
  (format t ">>end~%")
  )


(defun main (&rest argv)
  (declare (ignorable argv))
  ;;(trace ff-url ff-source ff-req request x-read-char-no-hang)
  
  (format t ">>>>~%")
  
  (ff-deinit-force)
  
  (sleep 1)
  
  (ff-init)
  
  (format t ">>>>~%")
  
  (sleep 1)
  
  (setf (ff-url) "https://www.google.com")
  
  (format t ">>>>~%")
  
  (sleep 1)
  
  (format t ">>>~%")
  (let ((*debugp* t))
    (ff-source)
    )
  (format t ">>>@~%")
  )
